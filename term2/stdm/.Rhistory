y=thouses[,"Camden"]))+
geom_point()
thouses
ggplot(thouses,
aes(x=2011:2015,
y=value, color = variable))+
geom_point()
thouses$year <- 2011:2015
thouses
thouses.melted <- melt(thouses, id = "year")
ggplot(data = thouses.melted, aes(x = x, y = value, color = variable)) +
geom_point()
ggplot(data = thouses.melted, aes(x = x, y = value)) +
geom_point()
thouses.melted
df <- data.frame(2011:2015, thouses$`City of London`, thouses$Camden, thouses$Hackney)
ggplot(data = df.melted, aes(x = x, y = value)) +
geom_point()
x <- 2011:2015
x
df <- data.frame(x, thouses$`City of London`, thouses$Camden, thouses$Hackney)
df.melted <- melt(df, id = "x")
ggplot(data = df.melted, aes(x = x, y = value)) +
geom_point()
ggplot(data = df.melted, aes(x = x, y = value, color = variable)) +
geom_point()
ggplot(data = df.melted, aes(x = x, y = "Median Price", color = variable)) +
geom_point()
ggplot(data = df.melted, aes(x = x, y = value, color = variable)) +
geom_point()
ggplot(data = df.melted, aes(x = x, y = value, color = variable)) +
geom_point() + geom_line()
df.melted <- melt(df, id = "Year")
df.melted <- melt(df, id = "x")
ggplot(data = df.melted, aes(x = x, y = value, color = variable)) +
geom_point() + geom_line()
thouses
df <- data.frame(x, thouses)
df.melted <- melt(df, id = "x")
ggplot(data = df.melted, aes(x = x, y = value, color = variable)) +
geom_point() + geom_line()
houses <- read.csv("/Users/heidihurst/Documents/UK2017/GradSchool/t1/principles-spatial-analysis/MedianHousePrices.csv", row.names = 1, header = TRUE)
thouses <- as.data.frame(t(houses))
thouses <- as.data.frame(t(houses))
thouses.melted <- melt(thouses, id = "year")
x <- 2011:2015
df <- data.frame(x, thouses)
df.melted <- melt(df, id = "x")
ggplot(data = df.melted, aes(x = x, y = value, color = variable)) +
geom_point() + geom_line
library(ggplot2)
library(reshape2)
houses <- read.csv("/Users/heidihurst/Documents/UK2017/GradSchool/t1/principles-spatial-analysis/MedianHousePrices.csv", row.names = 1, header = TRUE)
thouses <- as.data.frame(t(houses))
thouses <- as.data.frame(t(houses))
thouses.melted <- melt(thouses, id = "year")
x <- 2011:2015
houses <- read.csv("/Users/heidihurst/Documents/UK2017/GradSchool/t1/principles-spatial-analysis/MedianHousePrices.csv", row.names = 1, header = TRUE)
thouses <- as.data.frame(t(houses))
x <- 2011:2015
df <- data.frame(x, thouses)
df.melted <- melt(df, id = "x")
ggplot(data = df.melted, aes(x = x, y = value, color = variable)) +
geom_point() + geom_line
ggplot(data = df.melted, aes(x = x, y = value, color = variable)) +
geom_point() + geom_line()
ggplot(data = df.melted, aes(x = x, y = value, color = variable)) +
geom_point() + geom_line() + labs(x = Year, y = "Median Price")
ggplot(data = df.melted, aes(x = x, y = value, color = variable)) +
geom_point() + geom_line() + labs(x = "Year", y = "Median Price")
ggplot(data = df.melted, aes(x = x, y = value, color = variable)) +
geom_point() + geom_line() + labs(x = "Year",
y = "Median Price",
title = "Housing Affordability in London's Boroughs")
cordata <- data.frame(thouses$Camden, thouses$`Kensington and Chelsea`, thouses$Hackney)
cor(cordata)
fit <- lm(cordata$thouses.Camden, cordata$thouses..Kensington.and.Chelsea.)
fit <- lm(cordata$thouses.Camden ~ cordata$thouses..Kensington.and.Chelsea.)
fit
cordata[1]
plot(thouses$Camden, thouses$`Kensington and Chelsea`)
plot(fit)
ggplot(thouses, aes(x=Camden, y=`Kensington and Chelsea`)) + geom_point(shape=1) + geom_smooth(method=lm)
plot(thouses$Camden, thouses$`Kensington and Chelsea`)
ggplot(thouses, aes(x=Camden, y=`Kensington and Chelsea`)) + geom_point(shape=1) + geom_smooth(method=lm)
ggplot(thouses, aes(x=Hackney, y=`Kensington and Chelsea`)) + geom_point(shape=1) + geom_smooth(method=lm)
ggplot(thouses, aes(x=Hackney, y=Camden)) + geom_point(shape=1) + geom_smooth(method=lm)
fit <- lm(thouses$Hackney ~ thouses$Camden)
cordata <- data.frame(thouses$Camden, thouses$`Kensington and Chelsea`, thouses$Hackney)
cor(cordata)
ckfit <- lm(thouses$Camden ~ thouses$`Kensington and Chelsea`)
hkfit <- lm(thouses$Hackney ~ thouses$`Kensington and Chelsea`)
hcfit <- lm(thouses$Hackney ~ thouses$Camden)
ggplot(thouses, aes(x=Camden, y=`Kensington and Chelsea`)) + geom_point(shape=1) + geom_smooth(method=lm)
ggplot(thouses, aes(x=Hackney, y=`Kensington and Chelsea`)) + geom_point(shape=1) + geom_smooth(method=lm)
ggplot(thouses, aes(x=Hackney, y=Camden)) + geom_point(shape=1) + geom_smooth(method=lm)
houses <- read.csv("file:///Users/heidihurst/Documents/UK/ucl-gis/t1/principles-spatial-analysis/assignment2-bearman/data/london-house-prices-pp-2016.txt")
head(houses)
houses.summary()
summary(houses)
summary(houses)
house1 <- houses$PAON[1]
house1
house1 <- houses$PAON[1][1]
house1
house1 <- houses$PAON
house1
house1[1]
house1 <- houses$PAON[1] + houses$Street[1] + houses$Locality[1]
+ as.character(houses$Locality[1])
house1 <- as.character(houses$PAON[1]) + as.character(houses$Street[1]) \
house1 <- as.character(houses$PAON[1]) + as.character(houses$Street[1]) + as.character(houses$Locality[1])
as.character(houses$PAON[1])
as.character(houses$Street[1])
house1 <- paste(as.character(houses$PAON[1]), as.character(houses$Street[1]),
as.character(houses$Locality[1], sep = " ")
house1 <- paste(as.character(houses$PAON[1]), as.character(houses$Street[1]),
as.character(houses$Locality[1]), sep = " ")
house1
as.character(houses$Street[1]),
street1 <- as.character(houses$Locality[1])
num1 <- as.character(houses$PAON[1])
house1 <- paste(num1, street1, sep = " ")
house1
houses$Locality[1]
street1 = as.character(houses$Street[1])
town1 <- as.character(houses$Town.City[1])
num1 <- as.character(houses$PAON[1])
house1 <- paste(num1, street1, town1, sep = " ")
house1
county1 <- as.character(houses$County[1])
house1 <- paste(num1, street1, town1, county, sep = " ")
house1 <- paste(num1, street1, town1, county1, sep = " ")
house1
library(ggmap)
geocode(house1)
geocode(house1, source = "dsk")
lat, long = geocode(house1, source = "dsk")
lat, long <- geocode(house1, source = "dsk")
lat <- geocode(house1, source = "dsk")
lat <- geocode(house1, source = "dsk")$lat
houses[1]
houses@data[1]
houses
houses[1,]
houses[1,]$PAON
geohouse(houses[1,])
geohouse <- function(house){
num <- as.character(house$PAON)
street <- as.character(house$Street)
town <- as.character(house$Town.City)
county <- as.character(house$County)
address <- paste(num, street, town, county, sep = " ")
loc <- geocode(address, source = "dsk")
return()
}
geohouse(houses[1,])
geohouse <- function(house){
num <- as.character(house$PAON)
street <- as.character(house$Street)
town <- as.character(house$Town.City)
county <- as.character(house$County)
address <- paste(num, street, town, county, sep = " ")
print(address)
loc <- geocode(address, source = "dsk")
return()
}
geohouse(houses[1,])
geohouse <- function(house){
num <- as.character(house$PAON)
street <- as.character(house$Street)
town <- as.character(house$Town.City)
county <- as.character(house$County)
address <- paste(num, street, town, county, sep = " ")
print(address)
loc <- geocode(address, source = "dsk")
return(loc)
}
geohouse(houses[1,])
print("banana")
print("banana",house1)
print("banana"+ house1)
geohouse <- function(house){
num <- as.character(house$PAON)
street <- as.character(house$Street)
town <- as.character(house$Town.City)
county <- as.character(house$County)
address <- paste(num, street, town, county, sep = " ")
print(address)
tryCatch({loc <- geocode(address, source = "dsk")},
finally = {paste("Error geolocating ",house1)})
loc <- geocode(address, source = "dsk")
return(loc)
}
geohouse(houses[1,])
geocode("asldkfjaslkdj;alsdfkj", source = "dsk")
df <- data.frame()
df$a <- 1
?data.frame()
df <- data.frame("a")
df
df$b <- b
df$b <- "b"
df
df[2,]$b <- "b"
df
print(house)
for (house in houses){
print(house)
}
geocode("asldkfjaslkdj;alsdfkj", source = "dsk")
for (house in houses){
loc <- geohouse(house)
house$lat <- loc$lat
house$lon <- loc$lon
}
house <- houses[1,]
house$PAON
house["PAON"]
geohouse <- function(house){
num <- as.character(house["PAON"])
street <- as.character(house$Street)
town <- as.character(house$Town.City)
county <- as.character(house$County)
address <- paste(num, street, town, county, sep = " ")
#geocode using dsk
tryCatch({loc <- geocode(address, source = "dsk")},
finally = {paste("Error geolocating ",house1)})
return(loc)
}
for (house in houses){
loc <- geohouse(house)
house$lat <- loc$lat
house$lon <- loc$lon
}
geohouse <- function(house){
num <- as.character(house["PAON"])
street <- as.character(house["Street"])
town <- as.character(house["Town.City"])
county <- as.character(house["County"])
address <- paste(num, street, town, county, sep = " ")
#geocode using dsk
tryCatch({loc <- geocode(address, source = "dsk")},
finally = {paste("Error geolocating ",house1)})
return(loc)
}
for (house in houses){
loc <- geohouse(house)
house$lat <- loc$lat
house$lon <- loc$lon
}
head(houses)
for (house in houses){
loc <- geohouse(house)
print(loc)
house$lat <- loc$lat
house$lon <- loc$lon
}
warnings(https://blogs.esri.com/esri/arcgis/2017/12/12/absurd-paper-maps-in-pro/)
warnings()
for (house in houses){
loc <- geohouse(house)
print(loc)
house$lat <- loc$lat
house$lon <- loc$lon
}
for (house in houses){
loc <- geohouse(house)
print(loc)
house$lat <- loc["lat"]
house$lon <- loc$lon
}
for (house in houses){
loc <- geohouse(house)
print(loc)
house["lat"] <- loc["lat"]
house$lon <- loc$lon
}
head(houses)
houses$lon <- NA
houses$lat <- NA
head(houses)
for (house in houses){
loc <- geohouse(house)
print(loc)
house["lat"] <- loc["lat"]
house$lon <- loc$lon
}
head(houses)
length(houses)
nrow(houses)
for (i in range(nrow(houses))){
print(i)
# loc <- geohouse(house)
# print(loc)
# house["lat"] <- loc["lat"]
# house$lon <- loc$lon
}
for (i in 1:nrow(houses)){
print(i)
# loc <- geohouse(house)
# print(loc)
# house["lat"] <- loc["lat"]
# house$lon <- loc$lon
}
source('~/Documents/UK/ucl-gis/ucl_msc/gis_psa/bearmaneda.r', echo=TRUE)
houses[0,]
houses[nrow(houses),]
for (i in 1:nrow(houses)){
# print(i)
loc <- geohouse(houses[i,])
print(loc)
# house["lat"] <- loc["lat"]
# house$lon <- loc$lon
}
geohouse <- function(house){
# num <- as.character(house["PAON"])
# street <- as.character(house["Street"])
# town <- as.character(house["Town.City"])
# county <- as.character(house["County"])
num <- as.character(house$PAON)
street <- as.character(house$Street)
town <- as.character(house$Town.City)
county <- as.character(house$County)
address <- paste(num, street, town, county, sep = " ")
#geocode using dsk
tryCatch({loc <- geocode(address, source = "dsk")},
finally = {paste("Error geolocating ",house1)})
return(loc)
}
for (i in 1:nrow(houses)){
# print(i)
loc <- geohouse(houses[i,])
print(loc)
# house["lat"] <- loc["lat"]
# house$lon <- loc$lon
}
for (i in 1:nrow(houses)){
# print(i)
loc <- geohouse(houses[i,])
print(loc)
houses[i, "lat"] <- loc["lat"]
houses[i, "lon"] <- loc["lon"]
}
View(houses)
View(houses)
which(is.na(houses$lon))
sum(is.na(houses$lon))
is.na(houses$lon)
which(is.na(houses$lon))
for (i in which(is.na(houses$lon))){
print(i)
}
for (i in which(is.na(houses$lon))){
loc <- geohouse(houses[i,])
print(loc)
houses[i, "lat"] <- loc["lat"]
houses[i, "lon"] <- loc["lon"]
}
warnings()
for (i in which(is.na(houses$lon))){
loc <- geohouse(houses[i,])
print(loc)
houses[i, "lat"] <- loc["lat"]
houses[i, "lon"] <- loc["lon"]
}
for (i in which(is.na(houses$lon))){
loc <- geohouse(houses[i,])
print(loc)
houses[i, "lat"] <- loc["lat"]
houses[i, "lon"] <- loc["lon"]
}
pcode <- read.csv("file:///Users/heidihurst/Documents/UK/ucl-gis/t1/principles-spatial-analysis/assignment2-bearman/data/london-postcode-bng-lookup.txt")
head(pcode)
points(pcode$Eastings, pcode$Nothings)
plot.new()
points(pcode$Eastings, pcode$Nothings)
plot(pcode)
summary(pcode)
plot(500000:613189, 150000:238236)
plot(500000:613189, 150000:238236, type = "n")
plot(pcode$Eastings, pcode$Nothings)
plot(pcode$Eastings, pcode$Nothings)
plot(pcode$Eastings, pcode$Nothings, xlim = c(5000000,613200), ylim = c(15000,23800))
summary(pcode)
plot(pcode$Eastings, pcode$Nothings, xlim = c(5000000,613200), ylim = c(150000,239000))
plot(pcode$Eastings, pcode$Nothings, xlim = c(510000,613200), ylim = c(150000,239000))
plot(pcode$Eastings, pcode$Nothings, xlim = c(510000,613200), ylim = c(150000,239000), pch = 20)
?listw2mat
library(lattice)
library(lattice)
?listw2mat
??listw2mat
library(spdep)
setwd("/Users/heidihurst/Documents/UK/ucl-gis/t2/stdm/coursework/Cegeg076/data/boston/
")
setwd("/Users/heidihurst/Documents/UK/ucl-gis/t2/stdm/coursework/Cegeg076/data/boston/
")
setwd("/Users/heidihurst/Documents/UK/ucl-gis/t2/stdm/coursework/Cegeg076/data/boston/")
boston_total <- read.csv("boston-311.csv")
class(boston_total$open_dt)
boston_total$converted_date <- as.Date(bosotn_total$open_dt)
boston_total$converted_date <- as.Date(boston_total$open_dt)
library(lubridate)
boston_total$open_dt[0]
boston_total$open_dt_string <- as.character(boston_total$open_dt)
boston_total$open_dt_string[0]
boston_total$open_dt_string[2]
boston_total$open_dt_cleaned <- mdy_hms(as.character(boston_total$open_dt))
head(boston_total$open_dt_string)
class(boston_total$open_dt_string)
boston_total$open_dt_cleaned <- ymd_hms(boston_total$open_dt_string)
class(boston_total$open_dt_cleaned)
start_date <- ymd_hms("2017-06-01 00:00:00")
end_date <- ymd_hms("2017-08-31 23:59:59")
boston_subset <- boston_total[boston_total$open_dt_cleaned %in% start_date:end_date]
boston_subset <- boston_total[boston_total$open_dt_cleaned %in% start_date:end_date, ]
head(boston_subset)
boston_subset$target_dt_cleaned <- ymd_hms(as.character(boston_subset$target_dt))
boston_subset$closed_dt_cleaned <- ymd_hms(as.character(boston_subset$closed_dt))
write.csv(boston_subset, "boston_311_subset.csv")
setwd("/Users/heidihurst/Documents/UK/ucl-gis/t2/stdm/coursework/Cegeg076/data/austin/")
austin_total <- read.csv("Austin_311_Public_Data_June_to_August_2017.csv")
library(lubridate)
class(austin_total$Status.Change.Date)
austin_total$Status.Change.Date.cleaned <- ymd_hms(as.character(austin_total$Status.Change.Date))
austin_total$Status.Change.Date.cleaned <- dmy_hms(as.character(austin_total$Status.Change.Date))
austin_total[austin_total$Status.Change.Date.cleaned = null]
austin_total[austin_total$Status.Change.Date.cleaned == NULL]
austin_total[austin_total$Status.Change.Date.cleaned == NULL, ]
head(austin_total$Status.Change.Date.cleaned)
austin_total$Status.Change.Date.cleaned <- ymd_hms(austin_total$Status.Change.Date.cleaned)
head(austin_total$Status.Change.Date.cleaned)
austin_total$Status.Change.Date.cleaned <- dmy_hms(as.character(austin_total$Status.Change.Date))
class(austin_total$Status.Change.Date)
class(austin_total$Status.Change.Date.cleaned)
austin_total$Created.Date.cleaned <- dmy_hms(as.character(austin_total$Created.Date))
austin_total$Last.Update.Date.cleaned <- dmy_hms(as.character(austin_total$Last.Update.Date))
austin_total$Close.Date.cleaned <- dmy_hms(as.character(austin_total$Close.Date))
which(is.na(austin_total$Close.Date.cleaned))
austin_total[3510,]
austin_total[is.na(austin_total$Created.Date) OR is.na(austin_total$Created.Date.cleaned),]
austin_total[(is.na(austin_total$Created.Date) OR is.na(austin_total$Created.Date.cleaned)),]
austin_total[(is.na(austin_total$Created.Date) | is.na(austin_total$Created.Date.cleaned)),]
install.packages("anydate")
austin_total$Created.Date[(is.na(austin_total$Created.Date) | is.na(austin_total$Created.Date.cleaned)),]
austin_total$Created.Date[(is.na(austin_total$Created.Date) | is.na(austin_total$Created.Date.cleaned))]
testdate <- dmy_hms("06/13/2017 01:13:34 AM")
testdate <- dmy_hms("06/13/2017 01:13:34")
testdate <- dmy_hms("06/13/2017 01:13:34 AM")
testdate <- "06/13/2017 01:13:34 AM"
parse_date_time(testdate)
?parse_date_time
parse_date_time(testdate, "YmdHMS")
?strptime
strptime(testdate, "%m/%d/%y %H:%M:%S")
testdate <- "06/13/2017 01:13:34"
strptime(testdate, "%m/%d/%y %H:%M:%S")
testparse <- parse_date_time(testdate, "YmdHMS")
strpparse <- strptime(testdate, "%m/%d/%y %H:%M:%S")
strpparse
datefail <- austin_total$Created.Date[(is.na(austin_total$Created.Date) | is.na(austin_total$Created.Date.cleaned))]
datefail
notfail <- austin_total$Created.Date[(!is.na(austin_total$Created.Date.cleaned))]
head(notfail)
head(datefail)
austin_total$Status.Change.Date.cleaned <- mdy_hms(as.character(austin_total$Status.Change.Date))
austin_total$Created.Date.cleaned <- mdy_hms(as.character(austin_total$Created.Date))
austin_total$Last.Update.Date.cleaned <- mdy_hms(as.character(austin_total$Last.Update.Date))
austin_total$Close.Date.cleaned <- mdy_hms(as.character(austin_total$Close.Date))
write.csv(austin_total, "austin_311_subset.csv")
class(austin_total$Status.Change.Date.cleaned)
setwd("/Users/heidihurst/Documents/UK/ucl-gis/ucl-msc/t2/stdm/")
setwd("/Users/heidihurst/Documents/UK/ucl-gis/ucl_msc/t2/stdm/")
setwd("/Users/heidihurst/Documents/UK/ucl-gis/ucl_msc/term2/stdm/")
install.packages(c("plyr","stringr","tm","SnowballC","lda","LDAvis", "leaflet"))
library("plyr")
library("stringr")
library("tm")
library("SnowballC")
library("lda")
library("LDAvis")
library("leaflet")
install.packages(c("tm","SnowballC","lda","LDAvis", "leaflet"))
library("plyr")
library("stringr")
library("tm")
install.packages("tm")
install.packages(c("SnowballC","lda","LDAvis", "leaflet"))
library("tm")
library("SnowballC")
library("lda")
library("LDAvis")
library("leaflet")
library("plyr")
library("stringr")
library("tm")
install.packages("tm")
install.package("slam")
install.packages("slam")
Twitter <- read.csv("TwitterSample.csv")
Tweets_corpus <- Corpus(VectorSource(Twitter$TWEET_TEXT))
?Corpus
??Corpus
install.packages("tm")
install.packages('devtools')
library(devtools)
slam_url <- "https://cran.r-project.org/src/contrib/Archive/slam/slam_0.1-37.tar.gz"
install_url(slam_url)
install.packages("slam")
R.version
R.version
